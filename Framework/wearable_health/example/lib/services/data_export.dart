import 'dart:typed_data'; // For Uint8List, used to hold PDF bytes.
import 'dart:io'; // For File, Directory operations (saving PDF temporarily).

import 'package:flutter/material.dart'; // For BuildContext, ScaffoldMessenger, SnackBar.
import 'package:intl/intl.dart'; // For DateFormat, to format dates for filenames.
import 'package:path_provider/path_provider.dart'; // To get temporary directory for file storage.
import 'package:pdf/pdf.dart'; // For PdfColors, PdfPageFormat.
import 'package:pdf/widgets.dart' as pw; // For PDF document creation widgets (Text, Column, etc.), aliased as 'pw'.
import 'package:share_plus/share_plus.dart'; // For sharing files (the generated PDF).

import '../models/experimentation_result.dart'; // Data model for the results being exported.

/// A class responsible for exporting experimentation results into a PDF document
/// and providing functionality to share this PDF.
class ResultExporter {
  /// Creates a PDF document from the provided [ExperimentationResult] and then
  /// initiates a share intent to allow the user to share the generated PDF file.
  ///
  /// This method performs the following steps:
  /// 1.  Checks if the [BuildContext] is still mounted to prevent errors if the
  ///     widget tree has changed.
  /// 2.  Displays a "Creating PDF..." [SnackBar] to inform the user.
  /// 3.  Initializes a new PDF document ([pw.Document]).
  /// 4.  Adds a page to the PDF, formatting it with A4 page size.
  /// 5.  Constructs the content of the PDF page, including a title ("Experiment Results")
  ///     and a table generated by [_createResultsTable] containing the detailed results.
  /// 6.  Saves the PDF document into a byte array ([Uint8List]).
  /// 7.  Generates a unique filename for the PDF using the current date and time.
  /// 8.  Gets the temporary directory of the application.
  /// 9.  Writes the PDF byte array to a temporary file in that directory.
  /// 10. Uses the `share_plus` package to share the temporary PDF file.
  /// 11. Displays a [SnackBar] indicating the success or failure status of the share operation.
  ///
  /// Handles potential errors during PDF creation or sharing by printing an error
  /// to the console and showing an error [SnackBar] to the user.
  ///
  /// Parameters:
  ///  - [results]: An [ExperimentationResult] object containing the data to be exported.
  ///  - [context]: The [BuildContext] from which this method is called, used for
  ///    showing [SnackBar]s and checking if the widget is mounted.
  Future<void> createAndShareResults(ExperimentationResult results,
      BuildContext context) async {
    // Prevent operations if the widget is no longer in the tree.
    if (!context.mounted) return;

    // Inform the user that PDF creation is in progress.
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Creating PDF...')),
    );

    try {
      // Initialize a new PDF document.
      final pdf = pw.Document();

      // Add a page to the PDF.
      pdf.addPage(
        pw.Page(
          pageFormat: PdfPageFormat.a4, // Standard A4 page size.
          // Build the content for this page.
          build: (pw.Context pdfContext) {
            return pw.Center( // Center the content on the page.
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.center,
                // Center children horizontally.
                children: [
                  // Title of the PDF document.
                  pw.Text(
                    "Experiment Results",
                    style: pw.TextStyle(
                      fontSize: 24,
                      fontWeight: pw.FontWeight.bold,
                    ),
                  ),
                  pw.SizedBox(height: 20), // Add some spacing.
                  // Create and add the table containing the results data.
                  _createResultsTable(results),
                ],
              ),
            );
          },
        ),
      );

      // Save the PDF document to a byte array.
      final Uint8List pdfBytes = await pdf.save();

      // --- File Naming and Saving ---
      final DateTime now = DateTime.now();
      // Format the date for the filename (e.g., "23-10-26_15-30").
      final String formattedDate = DateFormat("yy-MM-dd_HH-mm").format(now);
      final String fileName = "experimentation_results_$formattedDate.pdf";

      // Get the application's temporary directory to store the PDF before sharing.
      final Directory tempDir = await getTemporaryDirectory();
      final File tempFile = File('${tempDir.path}/$fileName');
      // Write the PDF bytes to the temporary file.
      await tempFile.writeAsBytes(pdfBytes);

      // --- Sharing the PDF ---
      // Use the share_plus package to share the XFile representation of the temporary file.
      final ShareResult shareResult = await Share.shareXFiles(
        [XFile(tempFile.path)], // Path to the file to be shared.
        text: 'Experiment Results PDF', // Optional text accompanying the share.
      );

      // Display a message based on the outcome of the share operation.
      if (context
          .mounted) { // Check again if the widget is mounted before showing SnackBar.
        String message;
        if (shareResult.status == ShareResultStatus.success) {
          message = 'PDF shared successfully!';
        } else if (shareResult.status == ShareResultStatus.dismissed) {
          message = 'Share dismissed.';
        } else if (shareResult.status == ShareResultStatus.unavailable) {
          message = 'Sharing is not available on this device.';
        } else {
          // For any other status, include it in the message.
          message = 'Sharing completed with status: ${shareResult.status}';
        }
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(message)),
        );
      }
    } catch (e) {
      // Log the error to the console for debugging.
      print("Error during PDF creation or sharing: $e");
      // Inform the user about the error via a SnackBar if the widget is still mounted.
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error: Could not prepare or share PDF. $e')),
        );
      }
    }
  }

  /// Creates a [pw.Widget] (specifically a [pw.Table]) that visually represents
  /// the [ExperimentationResult] data.
  ///
  /// This table includes sections for:
  ///  - Records Summary (total records, HR records, HRV records).
  ///  - Conversion Success (successfully converted records and success rates for HR and HRV).
  ///  - Performance Metrics (total execution time, raw data fetch time, data conversion time).
  ///
  /// Parameters:
  ///  - [results]: The [ExperimentationResult] object containing the data to display.
  ///
  /// Returns:
  ///  A [pw.Table] widget formatted for inclusion in the PDF.
  pw.Widget _createResultsTable(ExperimentationResult results) {
    // Calculate success rates, handling potential division by zero.
    final hrSuccessRate = results.amountOfHRRecords > 0
        ? (results.amountOfValidatedHR / results.amountOfHRRecords * 100)
        .toStringAsFixed(2)
        : '0.00'; // Default to "0.00" if no HR records.

    final hrvSuccessRate = results.amountOfHRVRecords > 0
        ? (results.amountOfValidatedHRV / results.amountOfHRVRecords * 100)
        .toStringAsFixed(2)
        : '0.00'; // Default to "0.00" if no HRV records.

    // Define the table structure using the pdf package's Table widget.
    return pw.Table(
      border: pw.TableBorder.all( // Add a border to all cells in the table.
        color: PdfColors.grey700,
        width: 1,
      ),
      children: [
        // --- Section: Records Summary ---
        pw.TableRow(
          decoration: pw.BoxDecoration( // Style for the section header row.
            color: PdfColors.blue700,
          ),
          children: [
            pw.Padding(
              padding: const pw.EdgeInsets.all(5),
              child: pw.Text(
                'RECORDS SUMMARY',
                style: pw.TextStyle(
                  color: PdfColors.white,
                  fontWeight: pw.FontWeight.bold,
                ),
                textAlign: pw.TextAlign.center,
              ),
            ),
            pw.Container(),
            // Empty container for the second column in the header row.
          ],
        ),
        // Data rows for Records Summary.
        _createDataRow('Total Records Fetched', '${results.amountOfRecords}'),
        _createDataRow('Heart Rate Records', '${results.amountOfHRRecords}'),
        _createDataRow(
            'Heart Rate Variability Records', '${results.amountOfHRVRecords}'),

        // --- Section: Conversion Success ---
        pw.TableRow(
          decoration: pw.BoxDecoration( // Style for the section header row.
            color: PdfColors.green700,
          ),
          children: [
            pw.Padding(
              padding: const pw.EdgeInsets.all(5),
              child: pw.Text(
                'CONVERSION SUCCESS',
                style: pw.TextStyle(
                  color: PdfColors.white,
                  fontWeight: pw.FontWeight.bold,
                ),
                textAlign: pw.TextAlign.center,
              ),
            ),
            pw.Container(), // Empty container.
          ],
        ),
        // Data rows for Conversion Success.
        _createDataRow('Successfully Converted HR Records',
            '${results.amountOfValidatedHR}'),
        _createDataRow('HR Conversion Success Rate', '$hrSuccessRate%'),
        _createDataRow('Successfully Converted HRV Records',
            '${results.amountOfValidatedHRV}'),
        _createDataRow('HRV Conversion Success Rate', '$hrvSuccessRate%'),

        // --- Section: Performance Metrics (ms) ---
        pw.TableRow(
          decoration: pw.BoxDecoration( // Style for the section header row.
            color: PdfColors.orange700,
          ),
          children: [
            pw.Padding(
              padding: const pw.EdgeInsets.all(5),
              child: pw.Text(
                'PERFORMANCE METRICS (ms)',
                style: pw.TextStyle(
                  color: PdfColors.white,
                  fontWeight: pw.FontWeight.bold,
                ),
                textAlign: pw.TextAlign.center,
              ),
            ),
            pw.Container(), // Empty container.
          ],
        ),
        // Data rows for Performance Metrics.
        _createDataRow(
            'Total Execution Time', '${results.totalFetchTimeMs} ms'),
        _createDataRow(
            'Raw Data Fetch Time', '${results.rawDataFetchTimeMs} ms'),
        _createDataRow(
            'Data Conversion Time', '${results.conversionFetchTimeMs} ms'),
      ],
    );
  }

  /// Helper method to create a single row ([pw.TableRow]) for the results table.
  /// Each row consists of a label cell and a value cell.
  ///
  /// Parameters:
  ///  - [label]: The text for the left cell (the data label).
  ///  - [value]: The text for the right cell (the data value).
  ///
  /// Returns:
  ///  A [pw.TableRow] widget formatted for the results table.
  pw.TableRow _createDataRow(String label, String value) {
    return pw.TableRow(
      children: [
        // Label cell.
        pw.Padding(
          padding: const pw.EdgeInsets.symmetric(vertical: 4, horizontal: 8),
          child: pw.Text(
            label,
            style: pw.TextStyle(
              fontWeight: pw.FontWeight.bold, // Make the label bold.
            ),
          ),
        ),
        // Value cell.
        pw.Padding(
          padding: const pw.EdgeInsets.symmetric(vertical: 4, horizontal: 8),
          child: pw.Text(
            value,
            textAlign: pw.TextAlign.right, // Align the value to the right.
          ),
        ),
      ],
    );
  }
}